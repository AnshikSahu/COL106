class PointDatabase:    class Node:        def __init__(self,y_list,leaf,max_,min_,left=None,right=None):            self.max_,self.min_=max_,min_            self.left,self.right=left,right            self.leaf=leaf            self.sorted_in_y=y_list    def merge_sorted_lists(self,l1,l2):        s1,s2,resultant,i,j=len(l1),len(l2),[],0,0         while(i<s1 and j<s2):            if(l1[i][1]<l2[j][1]):              resultant.append(l1[i])              i+= 1            else:              resultant.append(l2[j])              j+= 1         return resultant+l1[i:]+l2[j:]    def combine_two_nodes(self,node1,node2):        y_list=self.merge_sorted_lists(node1.sorted_in_y,node2.sorted_in_y)        return self.Node(y_list,False,node2.max_,node1.min_,node1,node2)    def combine(self,nodes):        number_of_nodes=len(nodes)        if(number_of_nodes==1): return nodes        resultant_nodes=[None]*((number_of_nodes+1)//2)        for i in range(0,number_of_nodes//2): resultant_nodes[i]=self.combine_two_nodes(nodes[2*i],nodes[2*i+1])        if(number_of_nodes%2==1): resultant_nodes[-1]=nodes[-1]        return self.combine(resultant_nodes)    def __init__(self,pointlist):        pointlist.append((float("INF"),float("INF")))        self.sorted_in_x=sorted(pointlist,key= lambda point: point[0])        self.number_of_points=len(pointlist)        tree_in_x=[None]*self.number_of_points        for i in range(0,self.number_of_points): tree_in_x[i]=self.Node([self.sorted_in_x[i]],True,self.sorted_in_x[i][0],self.sorted_in_x[i][0])        self.tree_in_x=self.combine(tree_in_x)    def search(self,lis,x):        ans,low,high=float("INF"),0,len(lis)        while(low!=high):            mid=(low+high)//2            if(lis[mid][1]>=x): ans,high=min(ans,mid),mid             else: low=mid+1        if(low<len(lis) and lis[low][1]>=x): ans=min(ans,low)        return ans    def query_in_2D(self,lis,q,d,res):        low=self.search(lis,q[1]-d)        high=low        while(high<len(lis) and lis[high][1]<=q[1]+d):            res.append(lis[high])            high+=1    def query_in_1D(self,tree,q,d,res):        if(tree.min_>=q[0]-d and tree.max_<=q[0]+d): self.query_in_2D(tree.sorted_in_y,q,d,res)        elif(tree.min_<=q[0]+d and tree.max_>=q[0]-d):             self.query_in_1D(tree.left,q,d,res)            self.query_in_1D(tree.right,q,d,res)    def searchNearby(self,q,d):        result=[]        self.query_in_1D(self.tree_in_x[0],q,d,result)        return result